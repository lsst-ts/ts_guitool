.. |developer| replace:: *Te-Wei Tsai <ttsai@lsst.org>*

.. Note that the ts_ prefix is omitted from the title

########################
GUI Tool Code
########################

.. image:: https://img.shields.io/badge/GitHub-ts__guitool-green.svg
    :target: https://github.com/lsst-ts/ts_guitool
.. image:: https://img.shields.io/badge/Jenkins-ts__guitool-green.svg
    :target: https://tssw-ci.lsst.org/job/LSST_Telescope-and-Site/job/ts_guitool

.. _Overview:

Overview
========

This module contains the Python QT tool code.
The `eups <https://github.com/RobertLuptonTheGood/eups>`_ is used as the package manager.
This package also supports the `conda <https://docs.conda.io/en/latest>`_ package manager.

The badges above navigate to the GitHub repository for the tool code.

.. _Class:

Class
=====

* **Gauge** provides the color scale.
* **FigureConstant** is the figure to show the constant line data in real-time.
* **TabTemplate** to be the template of the control tables.
* **ControlTabs** has the control tables.
* **QMessageBoxAsync** is an asynchronous wrapper for the `QMessageBox <https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QMessageBox.html>`_. 
* **QFileDialogAsync** is an asynchronous wrapper for the `QFileDialog <https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QFileDialog.html>`_.

As the standard methods (such as `QDialog exec <https://doc.qt.io/qt-6/qdialog.html#exec>`_) provided by the **PySide6/QtWidgets** library aren't asynchronous (they are synchronous, forcing UI to wait for user action before redrawing UI content) and may spin an additional event loop when called, an asynchronous child is provided.
That makes the `qasync <https://github.com/CabbageDevelopment/qasync>`_ library and its event loop switching trick perform as expected.
Without those wrappers, the UI will be running for the duration of the method call synchronously, not waking up the `asynchronous tasks <https://docs.python.org/3/library/asyncio-task.html#task-object>`_ to react to incoming messages and redrawing widget content.

.. _API:

APIs
=============

This section is autogenerated from docstrings.

.. automodapi:: lsst.ts.guitool
    :no-inheritance-diagram:

.. _Build_And_Test:

Build and Test
==============

Using `docker <https://www.docker.com>`_ is highly recommended.
The built docker image is `develop_env <https://hub.docker.com/repository/docker/lsstts/develop-env>`_.

To setup and test the code using Docker, enter:

.. code-block:: bash

    docker run -it --rm -v ${repo_location}:/home/saluser/ts_guitool lsstts/develop-env:${tag}
    cd ts_guitool
    setup -k -r .

The environment shall be setup either from */home/saluser/.setup_dev.sh*.

.. _Version_History:

Version History
===============

The version history is at the following link.

.. toctree::
    version_history
    :maxdepth: 1

The released version is `here <https://github.com/lsst-ts/ts_guitool/releases>`_.

.. _Contributing:

Contributing
============

To contribute, please start a new pull request on `GitHub <https://github.com/lsst-ts/ts_guitool>`_.
Feature requests shall be filled in JIRA with the *ts_guitool* label.
In all cases, reaching out to the :ref:`contacts for this repo <Contact_Personnel>` is recommended.

.. _Contact_Personnel:

Contact Personnel
=================

For questions not covered in the documentation, emails should be addressed to the developer: |developer|.

This page was last modified |today|.
